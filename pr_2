#include <iostream>
#include <set>
#include <chrono>
#include <vector>
#include <unordered_set>
#include <unistd.h>

using namespace std;

using namespace chrono;

int binarySearch(int arr[], float number, int start, int end) {
    if (end >= start) {
        int mid = start + (end - start) / 2;
        if (arr[mid] == number) {
            return mid;
        }
        if (arr[mid] > number) {
            return binarySearch(arr, number, start, mid - 1);
        } else {
            return binarySearch(arr, number, mid + 1, end);
        }
    }
    return -1; 
}

void quickSort(int arr[],int n ,int end, int start){
    int mid;
    int f = start;
    int l = end;
    mid = arr[(f+l)/2];
    while (f < l){
        while (arr[f] < mid) f++;
        while (arr[l] > mid) l--;
        if (f <= l) {
            swap(arr[f], arr[l]);
            f++;
            l--;
        }
    }
}

void insertionSort(int arr[], int n){
    int i, j, key;
    for (i = 1; i < n; i++){
        key = arr[i];
        j = i - 1;
        while (j >=0 && arr[j] > key){
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void combSort(int arr[], int n){
    float k = 1.247;
    int s;
    s = n-1;
    while (s >= 1){
        for(int i = 0; i + s < n;i ++){
            if (arr[i] > arr[i + s]){
                swap(arr[i], arr[i + s]);
            }
        }
        s/=k;
    }
}

void cocktailSort(int arr[], int n){
    bool swapped = true;
    int start = 0;
    int end = n-1;
    while (swapped){
        swapped = false;
        for(int i  = 0; i < end; i++){
            if (arr[i] >  arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        if (!swapped){
            break;
        }
        end--;
        for(int i = end - 1;i >= start; i--){
            if (arr[i] > arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        start++;
    }
}

void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n ; i++){
        for (int j = 0; j < n - i - 1; j ++){
            if (arr[j] > arr[j + 1]){
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main(){
    const int n = 100;
    int arr[n];
    int originalArr[n]; 
    srand(static_cast<unsigned>(time(0)));
    int count_task = 0;
    int max_number = arr[0];
    int min_number = arr[0];
    bool flag = true;
    bool flag_sort = false;
    system("clear");
    while (flag){
        int task;
        cout << "\n\nВыберите номер задания(1-8) (9 - завершение программы) (10 - идз): ";
        cin >> task;
        switch(task){
            case 1:{
            for (int i = 0; i < n; ++i) {
                arr[i] = -99 + (rand() % 199);
                originalArr[i] = arr[i];
            }
                cout << "\nМассив до сортировки: ";
                for (int i = 0; i < n; i++){
                    cout << arr[i] << " ";
                }
                count_task++;
                max_number = 0;
                min_number = 99;
                for (int i = 1; i < n; ++i) {
                    if (arr[i] > max_number) max_number = arr[i];
                    if (arr[i] < min_number) min_number = arr[i];
                }
                break;
            }
            
            case 2:{
                if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
                auto start = steady_clock::now();
                cocktailSort(arr,n);
                auto end = steady_clock::now();
                auto result_sort = duration_cast<nanoseconds>(end - start);

                cout << "\n\nМассив после сортировки: ";
                for (int i = 0; i < n; i++){
                    cout << arr[i] << " ";
                }
                cout <<"\n\nВремя сортировки в наносекундах = " <<result_sort.count();
                flag_sort = true;
                break;
            }
            case 3:{
                if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
                cout << "\n\nВыберите в каком массиве производить поиск(1-сорт/0-несорт)";
                int choice;
                cin >> choice;
                if (choice == 1){
                    auto start_search_sort = steady_clock::now();
                    max_number = arr[99];
                    min_number = arr[0];
                    auto end_search_sort = steady_clock::now();
                    auto result_search_sort = duration_cast<nanoseconds>(end_search_sort - start_search_sort);
                    cout << "\n\nНаибольший элемент массива(сорт): "<< max_number;
                    cout << "\nНаименьший элемент массива(сорт): "<< min_number;
                    cout << "\n\nВремя поиска макс и мин элементов в отсортированном массиве = " << result_search_sort.count() << " наносекунд";
                }
                else{
                    /*
                    for(int i = 0; i < 100; i++){
                        cout << originalArr[i]<<" ";
                    }
                    */
                    int max_number = originalArr[0];
                    int min_number = originalArr[0];
                    auto start_search_sort = steady_clock::now();
                    for (int number : originalArr) {
                        if (number > max_number) max_number = number;
                        if (number < min_number) min_number = number;
                    }
                    auto end_search_sort = steady_clock::now();
                    auto result_search_sort = duration_cast<nanoseconds>(end_search_sort - start_search_sort);
                    cout << "\n\nНаибольший элемент массива(несорт): "<< max_number;
                    cout << "\nНаименьший элемент массива(несорт): "<< min_number;
                    cout << "\n\nВремя поиска макс и мин элементов в отсортированном массиве = " << result_search_sort.count() << " наносекунд";
                    }
                break;
            }
            case 4:
                if (count_task == 0) {
                cout << "nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                break;
            }

            cout << "Выберите в каком массиве хотите произвести поиск(1-сорт/0-несорт): ";
            int choice_4;
            cin >> choice_4;

            if (choice_4 == 1) {
                int mid_num_sort = (max_number + min_number) / 2.0;
                cout << "\n\nСреднее значение макс и мин элементов в отсортированном массиве = " << mid_num_sort;

                vector<int> indices;
                auto start_index_search_sort = steady_clock::now();

                int found_index = binarySearch(arr, mid_num_sort, 0, n - 1);
                
                if (found_index == -1) {
                    cout << "\nЭлемент не найден в массиве!" << endl;
                    break;
                }

                
                for (int i = found_index - 1; i >= 0 && arr[i] == mid_num_sort; i--) {
                    indices.push_back(i);
                }
                indices.push_back(found_index);
                for (int i = found_index + 1; i < n && arr[i] == mid_num_sort; i++) {
                    indices.push_back(i);
                }

                auto end_index_search_sort = steady_clock::now();
                auto result_index_search_sort = duration_cast<nanoseconds>(end_index_search_sort - start_index_search_sort);

                cout << "\n\nИндексы элементов среднего значения(сорт) = ";
                for (int ind : indices) {
                    cout << ind << " ";
                }
                cout << "\nИх кол-во = " << indices.size() << endl;
                cout << "\n\nВремя поиска индексов среднего значения в отсортированном массиве = " << result_index_search_sort.count() << " наносекунд";
                break;
            }

                if (choice_4 == 0){
                    float mid_num_unsort = (max_number + min_number) / 2.0; 
                    cout << "\n\nСреднее значение макс и мин элементов в неотсортированном массиве = " << mid_num_unsort;
                    vector<int> indeces;
                    auto start_index_search_unsort = steady_clock::now();
                    int count_mid = 0;
                    for (int i = 0; i < n; i++) {
                        if (mid_num_unsort == originalArr[i]){
                            indeces.push_back(i);
                            count_mid++;
                        }
                    }
                    auto end_index_search_unsort = steady_clock::now();
                    auto result_index_search_unsort = duration_cast<nanoseconds>(end_index_search_unsort - start_index_search_unsort);
                    cout << "\n\nИндексы элементов среднего значения(несорт) = ";
                    for (int ind : indeces) {
                        cout << ind << " ";
                    }
                    cout << "\nИх кол-во = "<<count_mid << endl;
                    cout << "\n\nВремя поиска индексов среднего значения в неотсортированном массиве = " << result_index_search_unsort.count() << " наносекунд";
                    break;
                }
            case 5:{
                if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
                int a;
                cout << "\nВведите число a ";
                cin >> a;
                int count_a = 0;
                unordered_set<int> unique_numbers;
            
                for (int i = 0; i < n; i++) {
                    if (arr[i] < a) {
                        unique_numbers.insert(arr[i]);
                    }
                }
                count_a = unique_numbers.size();
                cout << "\n\nКол-во чисел в массиве, которые меньше введенного числа a = " << count_a<< endl;
                break;
            }
            case 6:{
                if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
                int b;
                cout << "\nВведите число b ";
                cin >> b;
                int count_b = 0;
                unordered_set<int> unique_numbers;
                
                    for (int i = 0; i < n; i++) {
                        if (arr[i] > b) {
                            unique_numbers.insert(arr[i]);
                        }
                    }

                    count_b = unique_numbers.size();
                cout << "\n\nКол-во чисел в массиве, которые больше введенного числа b = " << count_b << endl;
                break;
            }
            case 7:{
                if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
                cout << "\n\nВведите число для нахождения его при помощи бинарного поиска: ";
                int number;
                cin >> number;
                auto binary_searchnumber = steady_clock::now();
                binarySearch(arr, number,0,n-1);
                auto binary_searchnumber_end = steady_clock::now();
                auto binary_searchnumber_time = duration_cast<nanoseconds>(binary_searchnumber_end - binary_searchnumber);
                if (binarySearch(arr, number,0,n-1)){
                    cout << "\nЭлемент есть в массиве(бинарный)!"<< endl;
                }
                else{
                    cout << "\nЭлемент не найден в массиве(бинарный)!"<< endl;
                }
                cout << "Время выполнения бинарного поиска = " << binary_searchnumber_time.count() << " наносекунд";
                bool flag = false;
                auto searchnumber = steady_clock::now();
                for (int i; i< n;i++){
                    if (arr[i] == number){
                        flag = true;
                        break;
                    }
                }
                auto searchnumber_end = steady_clock::now();
                auto searchnumber_time = duration_cast<nanoseconds>(searchnumber_end - searchnumber);
                if (flag){
                    cout << "\n\nЭлемент есть в массиве!"<< endl;
                }
                else{
                    cout << "\n\nЭлемент не найден в массиве!"<< endl;
                }
                cout << "Время выполнения переборного поиска = " << searchnumber_time.count() << " наносекунд";
                flag = false;
                break;
            }
            
        case 8:{
            if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
            cout << "\n\nВведите индексы чисел, которые стоит поменять местами: ";
            int index1, index2;
            cin >> index1 >> index2;
            auto swap_time = steady_clock::now();
            swap(arr[index1], arr[index2]);
            auto swap_end = steady_clock::now();
            auto swap_duration = duration_cast<nanoseconds>(swap_end - swap_time);
            cout << "\n\nМассив после замены элементов: ";
            for (int i = 0; i < n; i++){
                cout << arr[i] << " ";
            }
            cout << "\n\nВремя замены элементов местами = " << swap_duration.count() << " наносекунд";
            break;
        }
        case 9:{
            flag = false;
            break;}
        case 10:{
            if (count_task == 0){
                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                    break;
                }
            cout << "Введите с каким массивом хотите работать: (1 - сорт/0 - несорт): ";
            int answer_idz;
            cin >> answer_idz;
            if (answer_idz == 1){
                if (flag_sort == false){
                    cout << "Массив еще не был отсортирован, попробуйте снова!";
                    break;
                }
                int idz_number;
                cout << "Введите на какое значение будем уменшать каждый нечетный элемент: " << endl;
                cin >> idz_number;
                for (int i = 0; i < n; ++i) {
                    if(i % 2 != 0){
                        arr[i] -= idz_number;
                    }
                }
                cout << "Массив после уменьшения: " << endl;
                for (int i = 0; i < n; ++i) {
                    cout << arr[i] << " ";
                }
                for (int i = 0; i < n; ++i){
                    if (i % 2 != 0){
                        arr[i] = arr[i] * (rand() % 9 + 1);
                    }
                }
                cout << '\n';
                cout << "Массив после умножение: " << endl;
                for (int i = 0; i < n; ++i) {
                    cout << arr[i] << " ";
                }
                vector <int>counts(10,0); //10 элементов и все равны 0
                for(int i  = 0; i < n; ++i){
                    for (int j = 1; j < 10; ++j){
                        if(arr[i] % j == 0){
                            counts[j]++;
                        }
                    }
                }
                for(int i  = 1; i < 10; i++){
                    cout << "\nКол-во элементов, которые нацело делятся на "<< i << " равно: "<< counts[i] << endl;
                }
            }
            if (answer_idz == 0){
                int idz_number;
                cout << "Введите на какое значение будем уменшать каждый нечетный элемент: " << endl;
                cin >> idz_number;
                for (int i = 0; i < n; ++i) {
                    if(i % 2 != 0){
                        originalArr[i] -= idz_number;
                    }
                }
                cout << "Массив после уменьшения: " << endl;
                for (int i = 0; i < n; ++i) {
                    cout << originalArr[i] << " ";
                }
                for (int i = 0; i < n; ++i){
                    if (i % 2 != 0){
                        originalArr[i] = originalArr[i] * (rand() % 9 + 1);
                    }
                }
                cout << '\n';
                cout << "Массив после умножение: " << endl;
                for (int i = 0; i < n; ++i) {
                    cout << originalArr[i] << " ";
                }
                vector <int>counts(10,0);
                for(int i  = 0; i < n; ++i){
                    for (int j = 1; j < 10; ++j){
                        if(originalArr[i] % j == 0){
                            counts[j]++;
                        }
                    }
                }
                for(int i  = 1; i < 10; i++){
                    cout << endl;
                    cout << "\nКол-во элементов, которые нацело делятся на "<< i << " равно: "<< counts[i] << endl;
                }
            }
        }
    }
}
}



/*
rubbish.cpp

#include <iostream>
#include <set>
#include <chrono>
#include <vector>
   
using namespace std;
using namespace chrono;

bool binarySearch(int arr[], int number, int start, int end) {
    if (end >= start) {
        int mid = start + (end - start) / 2;
        if (arr[mid] == number) {
            return true;
        }
        if (arr[mid] > number) {
            return binarySearch(arr, number, start, mid - 1);
        } else {
            return binarySearch(arr, number, mid + 1, end);
        }
    }
    return false; 
}
void quickSort(int arr[],int n ,int end, int start){
    int mid;
    int f = start;
    int l = end;
    mid = arr[(f+l)/2];
    while (f < l){
        while (arr[f] < mid) f++;
        while (arr[l] > mid) l--;
        if (f <= l) {
            swap(arr[f], arr[l]);
            f++;
            l--;
        }
    }
}

void insertionSort(int arr[], int n){
    int i, j, key;
    for (i = 1; i < n; i++){
        key = arr[i];
        j = i - 1;
        while (j >=0 && arr[j] > key){
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void combSort(int arr[], int n){
    float k = 1.247;
    int s;
    s = n-1;
    while (s >= 1){
        for(int i = 0; i + s < n;i ++){
            if (arr[i] > arr[i + s]){
                swap(arr[i], arr[i + s]);
            }
        }
        s/=k;
    }
}

void cocktailSort(int arr[], int n){
    bool swapped = true;
    int start = 0;
    int end = n-1;
    while (swapped){
        swapped = false;
        for(int i  = 0; i < end; i++){
            if (arr[i] >  arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        if (!swapped){
            break;
        }
        end--;
        for(int i = end - 1;i >= start; i--){
            if (arr[i] > arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        start++;
    }
}

void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n ; i++){
        for (int j = 0; j < n - i - 1; j ++){
            if (arr[j] > arr[j + 1]){
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

//1 задание
int main(){
    int n = 100;
    int arr[n];
    srand(static_cast<unsigned>(time(0)));
    

    vector<int> unique_numbers;

    for (int i = 0; i < n; ++i) {
        arr[i] = -99 + (rand() % 199); // Генерация случайного числа от -99 до 99
    }




    //Вывод массива до сортировки
    cout << "Массив до сортировки: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }

    //Поиск максимального и минимального элементов
    int max_number = 0;
    int min_number = 99;
    auto start_search_unsort = steady_clock::now();
    for (int number : arr) {
        if (number > max_number) max_number = number;
        if (number < min_number) min_number = number;
    }
    auto end_search_unsort = steady_clock::now();
    auto result_search_unsort = duration_cast<nanoseconds>(end_search_unsort - start_search_unsort);
    cout << "\n\nНаибольший элемент массива(несорт): "<< max_number;
    cout << "\nНаименьший элемент массива(несорт): "<< min_number;
    float mid_num_sort = (max_number + min_number) / 2.0; 
    cout << "\n\nСреднее значение макс и мин элементов = " << mid_num_sort;
    cout << "\n\nВремя поиска макс и мин элементов в неотсортированном массиве = " << result_search_unsort.count() << " наносекунд";
    
    vector<int> indeces;
    auto start_index_search_unsort = steady_clock::now();
    int count_mid = 0;
    for (int i = 0; i < n; i++) {
        if (mid_num_sort == arr[i]){
            indeces.push_back(i);
            count_mid++;
        }
    }
    auto end_index_search_unsort = steady_clock::now();
    auto result_index_search_unsort = duration_cast<nanoseconds>(end_index_search_unsort - start_index_search_unsort);
    cout << "\n\nИндексы элементов среднего значения(несорт) = ";
    for (int ind : indeces) {
        cout << ind << " ";
    }
    cout << "\nИх кол-во = "<<count_mid << endl;
    cout << "\n\nВремя поиска индексов среднего значения в неотсортированном массиве = " << result_index_search_unsort.count() << " наносекунд";
    //Сортировка с замером времени
    auto start = steady_clock::now();
    cocktailSort(arr,n);
    auto end = steady_clock::now();
    auto result_sort = duration_cast<nanoseconds>(end - start);

    // Вывод массива после сортировки
    cout << "\n\nМассив после сортировки: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    // Вывод времени выполнения сортировки массива
    cout <<"\n\nВремя сортировки в наносекундах = " <<result_sort.count();

    max_number = 0;
    min_number = 99;
    auto start_search_sort = steady_clock::now();
    for (int number : arr) {
        if (number > max_number) max_number = number;
        if (number < min_number) min_number = number;
    }
    auto end_search_sort = steady_clock::now();
    auto result_search_sort = duration_cast<nanoseconds>(end_search_sort - start_search_sort);
    cout << "\n\nНаибольший элемент массива(сорт): "<< max_number;
    cout << "\nНаименьший элемент массива(сорт): "<< min_number;
    float mid_num_unsort = (max_number + min_number) / 2.0; 
    cout << "\n\nСреднее значение макс и мин элементов = " << mid_num_unsort;
    cout << "\n\nВремя поиска макс и мин элементов в отсортированном массиве = " << result_search_sort.count() << " наносекунд";
    indeces.clear();
    count_mid = 0;
    auto start_index_search_sort = steady_clock::now();
    for (int i = 0; i < n; i++) {
        if (mid_num_unsort == arr[i]){
            indeces.push_back(i);
            count_mid++;
        }
    }
    auto end_index_search_sort = steady_clock::now();
    auto result_index_search_sort = duration_cast<nanoseconds>(end_index_search_sort - start_index_search_sort);
    cout << "\n\nИндексы элементов среднего значения(сорт) = ";
    for (int ind : indeces) {
        cout << ind << " ";
    }
    cout << "\nИх кол-во = "<<count_mid << endl;
    cout << "\n\nВремя поиска индексов среднего значения в отсортированном массиве = " << result_index_search_sort.count() << " наносекунд";

    int a;
    cout << "\nВведите число a ";
    cin >> a;
    int count_a = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] < a){
            count_a++;
        }
    }
    cout << "\n\nКол-во чисел в массиве, которые меньше введенного числа a = " << count_a << endl;

    int b;
    cout << "\nВведите число b ";
    cin >> b;
    int count_b = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] > b){
            count_b++;
        }
    }
    cout << "\n\nКол-во чисел в массиве, которые больше введенного числа b = " << count_b << endl;
    cout << "\n\nВведите число для нахождения его при помощи бинарного поиска: ";
    int number;
    cin >> number;
    auto binary_searchnumber = steady_clock::now();
    binarySearch(arr, number,0,n-1);
    auto binary_searchnumber_end = steady_clock::now();
    auto binary_searchnumber_time = duration_cast<nanoseconds>(binary_searchnumber_end - binary_searchnumber);
    if (binarySearch(arr, number,0,n-1)){
        cout << "\nЭлемент есть в массиbbbbbbbве!"<< endl;
    }
    else{
        cout << "\nЭлемент не найден в массиве!"<< endl;
    }
    cout << "Время выполнения бинарного поиска = " << binary_searchnumber_time.count() << " наносекунд";
    bool flag = false;
    auto searchnumber = steady_clock::now();
    for (int i; i< n;i++){
        if (arr[i] == number){
            flag = true;
            break;
        }
    }
    auto searchnumber_end = steady_clock::now();
    auto searchnumber_time = duration_cast<nanoseconds>(searchnumber_end - searchnumber);
    if (flag){
        cout << "\n\nЭлемент есть в массиве!"<< endl;
    }
    else{
        cout << "\n\nЭлемент не найден в массиве!"<< endl;
    }
    cout << "Время выполнения переборного поиска = " << searchnumber_time.count() << " наносекунд";

    cout << "\n\nВведите индексы чисел, которые стоит поменять местами: ";
    int index1, index2;
    cin >> index1 >> index2;
    auto swap_time = steady_clock::now();
    swap(arr[index1], arr[index2]);
    auto swap_end = steady_clock::now();
    auto swap_duration = duration_cast<nanoseconds>(swap_end - swap_time);
    cout << "\n\nМассив после замены элементов: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    cout << "\n\nВремя замены элементов местами = " << swap_duration.count() << " наносекунд";
    return 0;
}

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
using namespace std;
int main() {
    const int size = 10;
    int arr[size];

    srand(static_cast<unsigned int>(time(0)));

    for (int i = 0; i < size; ++i) {
        arr[i] = rand() % 199 - 99;
    }

    cout << "Сгенерированный массив:" << endl;
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    int idz_number;
    cout << "Введите на какое значение будем уменшать: " << endl;
    cin >> idz_number;
    for (int i = 0; i < size; ++i) {
        if(i % 2 != 0){
            arr[i] -= idz_number;
        }
    }
    cout << "Массив после уменьшения: " << endl;
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    for (int i = 0; i < size; ++i){
        if (i % 2 != 0){
            arr[i] = arr[i] * (rand() % 9 + 1);
        }
    }
    cout << '\n';
    cout << "Массив после умножение: " << endl;
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    vector <int>counts(10,0); //10 элементов и все равны 0
    for(int i  = 0; i < size; ++i){
        for (int j = 1; j < 10; ++j){
            if(arr[i] % j == 0){
                counts[j]++;
            }
        }
    }
    for(int i  = 1; i < 10; i++){
        cout << "\nКол-во элементов, которые нацело делятся на "<< i << " равно: "<< counts[i] << endl;
    }
}*/
